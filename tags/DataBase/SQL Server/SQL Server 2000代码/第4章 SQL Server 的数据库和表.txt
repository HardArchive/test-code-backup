4.2.1  创建数据库
首先启动SQL Server 2000查询分析器，在弹出的【SQL 查询分析器】窗口的【查询】编辑对话框中输入创建数据库的T-SQL语句，其代码如下：
CREATE DATABASE book
On primary
(	name='book_data1',
filename='E:\sjk\book_data1.mdf',
size=5MB,
maxsize=UNLIMITED,
filegrowth=10%), 
(	name='book_data2',
filename='E:\sjk\book_data2.ndf',
size=3MB,
maxsize=50MB,
filegrowth=1MB),
filegroup bookgroup1
(	name='book_data3',
filename='E:\sjk\book_data3.ndf',
size=5MB,
maxsize=UNLIMITED,
filegrowth=2MB),
(	name='book_data4',
filename='E:\sjk\book_data4.ndf',
size=5MB,
maxsize=UNLIMITED,
filegrowth=2MB),
filegroup bookgroup2
(	name='book_data5',
filename='E:\sjk\book_data5.ndf',
size=2MB,
maxsize=100MB,
filegrowth=15%)
Log on
(	name='book_log',
filename='E:\sjk\book_log.ldf',
size=2MB,
maxsize=35MB,
filegrowth=1MB)
Go
4.2.2  修改数据库
下面我们通过ALTER DATABASE命令，在“图书管理系统”数据库中添加一个数据文件“图书管理系统_Data2”，并指定其初始大小为3MB；最大大小不受限制，最设置增长为15%。
ALTER  DATABASE  图书管理系统
ADD  FILE
(	NAME='图书管理系统_Data2',
FILENAME='E:\sjk\图书管理系统_Data2.mdf',
SIZE=3MB,
MAXSIZE=UNLIMITED,
FILEGROWTH=15%)
GO
接下来为“图书管理系统”数据库增加一个名为THIRD的文件组，并为该文件组添加两个数据文件。数据文件名分别是“图书管理系统_Data3”和“图书管理系统_Data4”，其中“图书管理系统_Data3”数据文件的初始大小是10MB，并且以2MB增长，最大大小不受限制；而“图书管理系统_Data4”数据文件初始大小是12MB，以12%增长，最大大小为120MB。
ALTER  DATABASE  图书管理系统
ADD  FILEGROUP  THIRD
GO
ALTER  DATABASE  图书管理系统
ADD  FILE
(	NAME='图书管理系统_Data3',
FILENAME='E:\sjk\图书管理系统_Data3.ndf',
SIZE=10MB,
MAXSIZE=UNLIMITED,
FILEGROWTH=2MB),
(	NAME='图书管理系统_Data4',
FILENAME='E:\sjk\图书管理系统_Data4.ndf',
SIZE=12MB,
MAXSIZE=120MB,
FILEGROWTH=12%)
TO  FILEGROUP  THIRD
GO
从数据库中删除数据文件图书管理系统_Data4。
ALTER  DATABASE  图书管理系统
REMOVE  FILE  图书管理系统_Data4
GO
将数据库“图书管理系统”中的文件组THIRD删除。注意被删除文件组必须为空，即不包括任何数据文件，如包含有数据文件则先将数据文件删除。
ALTER  DATABASE  图书管理系统
REMOVE  FILE  图书管理系统_Data3
GO
ALTER  DATABASE  图书管理系统
REMOVE FILEGROUP THIRD
GO
为数据库“图书管理系统”添加一个日志文件，所添加日志文件名为_Log1，并且所添日志文件初始大小为5MB，最大大小为78MB，按6MB增长。
ALTER  DATABASE  图书管理系统
ADD  LOG  FILE 
(	NAME='图书管理系统_Log1',
FILENAME='E:\sjk\图书管理系统_Log1.ldf',
SIZE=5MB,
MAXSIZE=78MB,
FILEGROWTH=6MB)
GO
删除上例中所创建的日志文件。
ALTER  DATABASE  图书管理系统
REMOVE  FILE  图书管理系统_Log1
GO
修改数据库“图书管理系统”的属性。将数据文件图书管理系统_Data2的初始大小改为8MB，最大大小为120MB，按6MB增长。注意每次只能修改数据文件的一个属性。
ALTER  DATABASE  图书管理系统
MODIFY  FILE
(	NAME='图书管理系统_Data2',
SIZE=8MB)
GO
ALTER  DATABASE  图书管理系统
MODIFY  FILE
(	NAME='图书管理系统_Data2',
MAXSIZE=120MB)
GO
ALTER  DATABASE  图书管理系统
MODIFY  FILE
(	NAME='图书管理系统_Data2',
FILEGROWTH=6MB)
GO
4.2.3  删除数据库
例如，要删除数据库“图书管理系统”则使用以下命令:
DROP  DATABASE  图书管理系统
GO
4.3.2  用户自定义数据类型
1.用户自定义数据类型
在数据库“图书管理系统”中，创建两个用户自定义数据类型xlx1和xlx2，要求他们分别基于数据类型varchar和char。
在查询分析器的命令窗口中输入以下语句：
USE 图书管理系统
EXEC sp_addtype  xlx1,’varchar(16)’,’not null’
EXEC sp_addtype  xlx2,’char(24)’,’null’
4.5.1  主键约束
1.通过一个实例实现主键约束
创建一个产品信息表，以产品编号和名称为主键。
CREATE TABLE products (
p_id char(8) NOT NULL,
p_name char(10) NOT NULL,
price money DEFAULT 0.01 ,
QUANTITY smallint NULL,
CONSTRAINT pk_p_id PRIMARY KEY (p_id, p_name)
) ON [PRIMARY]
将该语句在查询分析器中运行后，会发现在数据库中添加了名为products的表，并且该表中各个列名以及列的属性与语句中相一致。
4.5.2  外键约束
1.通过一个实例实现外键约束
创建一个订货表，与前面创建的产品表相关联
CREATE TABLE orders(
order_id char(8),
p_id char(8),
p_name char(10) ,
CONSTRAINT pk_order_id PRIMARY KEY (order_id) ,
FOREIGN KEY(p_id, p_name) REFERENCES products(p_id, p_name)
) ON [PRIMARY]
将上述语句在查询分析器中执行后，在相应的数据库中会发现创建了一个名为orders的表名，并且该表通过外键p_id与表products相关联。
4.5.3  惟一性约束
1.通过一个实例实现惟一性约束
定义一个员工信息表，其中员工的身份证号具有惟一性。
CREATE TABLE employees (
emp_id char(8),
emp_name char(10) ,
emp_cardid char(18),
CONSTRAINT pk_emp_id PRIMARY KEY (emp_id),
CONSTRAINT uk_emp_cardid UNIQUE (emp_cardid)
) ON [PRIMARY]
在查询分析器中运行上述语句后，在相应的数据库中创建了一个表名为employees的表，并且该表中列emp_cardid的值具有惟一性约束。
4.5.4  检查约束
1.通过一个实例实现检查约束
创建一个订货表其中定货量必须不小于10。在此操作时，对计算列不能作除检查约束外的任何约束。
CREATE TABLE orders(
order_id char(8),
p_id char(8),
p_name char(10) ,
quantity smallint,
CONSTRAINT pk_order_id PRIMARY KEY (order_id),
CONSTRAINT chk_quantity CHECK (quantity>=10),
) ON [PRIMARY]
在查询分析器中运行上述语句后，在相应的数据库中创建了一个表名为reders的表，并且对该表中列quantity进行约束检查，使其大小大于等于10。
4.5.5  缺省约束
1.通过一个实例实现缺省约束
不能在创建表时定义缺省约束，只能向已经创建好的表中添加缺省约束。
constraint de_order_quantity default 100 for order_quantity
4.5.6  列约束和表约束
1.列约束与表约束的区别
通过一些T-SQL语句简单了解列约束与表约束的区别。
CREATE TABLE products(
p_id char(8),
p_name char(10),
price money DEFAULT 0.01,
quantity smallint CHECK (quantity>=10), /* 列约束 */
CONSTRAINT pk_p_id PRIMARY KEY (p_id, p_name) /* 表约束 */
上机练习4-2：利用T-SQL语句创建数据库
使用SQL Server 2000数据库开发一个小型的酒店管理系统。要求创建的数据库名为“JiuDian”，指定主数据文件名为“JiuDian_Data”，其存储路径为“e:\sjk\JiuDian_Data.mdf”，该数据文件的初始大小为100MB，最大文件大小为200MB，并且按10MB增长；指定的主日志文件名为“JiuDian_Log”，其存储路径为“e:\sjk\JiuDian_Log”，该日志文件的初始大小为20MB，最大大小为100MB，并且按10MB增长。
打开查询分析器，在命令窗口中输入以下语句创建数据库：
CREATE DATABASE JiuDian
ON PRIMARY
( NAME=JiuDian_Data,
FILENAME='e:\sjk\JiuDian_Data.mdf',
SIZE=100,
MAXSIZE=200,
FILEGROWTH=10)
LOG ON
( NAME=JiuDian_Log,
FILENAME='e:\sjk\JiuDian_Log',
SIZE=50,
MAXSIZE=100,
FILEGROWTH=10)


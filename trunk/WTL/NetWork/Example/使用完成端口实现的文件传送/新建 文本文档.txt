使用完成端口实现的文件传送

记得一两个月前，我在这里看到一个帖子问到如何用IOCP传文件。当时我还不太了解。胡说八道了一通还发了个不怎么样的自己写的传送文件的小软件。过后看着自己都有些惭愧。 因为我刚开始学网络这一块的起因就是想在家里的几台电脑上传些文件，省得到处找U盘。一直到现在终于写出一个自己相对比较满意的传文件的了。并且都是用完成端口的。
当然它是分成服务端和客户端。 在两个都是用完成端口写的。是的，客户也是完成端口写的。你要问我有什么意义没？我觉得就学习来说是肯定有意义的，并且它在使用中占用率也相对于SELECT之类的多线程显得要小得多。主要还是硬盘在读写时占用太高了。
1。服务端 我花了不少时间在这个上面，关键是处理关闭套接字和内存的申请和释放上。并且写了很多注释，特别是在内存的处理上。这上面没有用AcceptEx而是用的accept。主要就是考虑到自己用的环境，事实上我也有用EX的传文件版本。传文件用到了一个扩展的函数TransmitFile，这里也用以了取地址指针的方法来得到这个函数。 因为在专业版的XP上只能同时有两个同时运行，所以同时只能给两上客户服传送。服务器版的WIN系统就没试过。不过我这里用了个方法，所以可以在多个客户端比如5、6个时它是轮流两个两个来的。理论上这个函数是直接在内核低下去传的，效率会比用CFILE打开，再一块一块的用SEND或是WSASEND出去要快得多。如果是在本机上测试，的确如此，但如果不在本机上，结果却是差不多。甚至不如用CFILE分块传来得快。我甚至怀疑我这专业版的XP是不是这个API有点问题。

2。客户端 这也是用完成端口编的，我找过网上很多东西，一般都说没必要之类的。但作为学习，并且如果写了个类，这就不成问题，并没麻烦多少。从实际效果来看，其实它的速度上和用多线程，直接用recv 来接收的速度相当。并没什么好的地方，占用可低点，这倒是真。通过完成端口，用WSARECV从内核去接收，并没想象中的好多少。

不管怎么样，这是我觉得自己写得比较好的一个版本了。
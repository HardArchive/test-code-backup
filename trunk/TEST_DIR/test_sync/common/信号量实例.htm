<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>信号量实例_君诺_新浪博客</title>
<meta name="keywords" content="信号量实例_君诺_新浪博客,君诺,杂谈" />
<meta name="description" content="信号量实例_君诺_新浪博客,君诺," />
<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE7" />
<!–[if lte IE 6]>
<script type="text/javascript">
try{
document.execCommand("BackgroundImageCache", false, true);
}catch(e){}
</script>
<![endif]–>
<script type="text/javascript">
window.staticTime=new Date().getTime();

var locInterval = setInterval(function(){
var tc = document.getElementById('trayContainer');
if(tc) {
var isLogin = false;var sup = document.cookie.match(/sup=([^;]+);/gi);if(sup != null){ sup = decodeURIComponent(sup[0]);var uid = sup.match(/uid=([^&]+)/gi); isLogin = (uid != null); } if (isLogin){ tc.innerHTML = '<div class="topbar_loading"><img src="http://simg.sinajs.cn/blog7style/images/common/loading.gif" />加载中…</div>'; } else { tc.innerHTML = '<div class="topbar_menu"><span class="link"><a href="http://blog.sina.com.cn" target="_blank">博客首页</a></span><span class="line_s"></span></div><div class="topbar_login"><a href="#" class="login" id="linkTrayLogin" onclick="return false;">登录</a><a href="http://login.sina.com.cn/signup/signupmail.php?entry=blog&r=&srcuid=&src=blogicp" class="register" target="_blank" id="linkReg">注册</a></div><div class="topbar_ad" id="divPopularize"></div><div id="phprender" ></div>';}
clearInterval(locInterval);
locInterval = null;
}
},50);

</script>
<link rel="pingback" href="http://upload.move.blog.sina.com.cn/blog_rebuild/blog/xmlrpc.php" />
<link rel="EditURI" type="application/rsd+xml" title="RSD" href="http://upload.move.blog.sina.com.cn/blog_rebuild/blog/xmlrpc.php?rsd" />
<link href="http://blog.sina.com.cn/blog_rebuild/blog/wlwmanifest.xml" type="application/wlwmanifest+xml" rel="wlwmanifest" />
<link rel="alternate" type="application/rss+xml" href="http://blog.sina.com.cn/rss/1853443664.xml" title="RSS" />
<link href="http://simg.sinajs.cn/blog7style/css/conf/blog/article.css" type="text/css" rel="stylesheet" /><link href="http://simg.sinajs.cn/blog7style/css/common/common.css" type="text/css" rel="stylesheet" /><link href="http://simg.sinajs.cn/blog7style/css/blog/blog.css" type="text/css" rel="stylesheet" /><link href="http://simg.sinajs.cn/blog7style/css/module/common/blog.css" type="text/css" rel="stylesheet" /><style id="tplstyle" type="text/css">@charset "utf-8";@import url("http://simg.sinajs.cn/blog7newtpl/css/5/5_13/t.css");
</style>
<style id="positionstyle"  type="text/css">
.sinabloghead .blogtoparea{ left:185px;top:41.5%;}
.sinabloghead .blognav{ left:165px;top:64%;}
</style>
<style id="bgtyle"  type="text/css">
</style>
<style id="headtyle"  type="text/css">
</style>
<style id="navtyle"  type="text/css">
</style>
<script type="text/javascript" src="http://d1.sina.com.cn/litong/zhitou/sspnew.js"></script></head>
<body>
<!--$sinatopbar--><!--$end sinatopbar-->


<div class="sinabloga" id="sinabloga">
	<div id="sinablogb" class="sinablogb"><!--主题内容开始 -->
    <div class="sinablogbody" id="sinablogbody">
		
	<!--第一列start--><!--第一列end-->
	
	<!--第二列start-->
	<div id="column_2" class="SG_colW73">	
<div id="module_920" class="SG_conn">
	<div class="SG_connHead">
	    <span comp_title="正文" class="title">正文</span>
	    <span class="edit"><span id="articleFontManage" class="fontSize">字体大小：<a href="javascript:;" onclick="changeFontSize(2);return false;">大</a> <strong>中</strong> <a href="javascript:;" onclick="changeFontSize(0);return false;">小</a></span></span>
	</div>
    <div class="SG_connBody">
<!--博文正文 begin -->
	<div id="articlebody" class="artical" favMD5='{"6e794e5001012xlj":"0a04942734e52af8b032a732b179567b"}'>
		<div class="articalTitle"> 
			
								<h2 id="t_6e794e5001012xlj" class="titName SG_txta">信号量实例</h2>
			
					<span class="time SG_txtc">(2012-04-22 00:43:08)</span><div class="turnBoxzz"><a href="javascript:;" class="SG_aBtn SG_aBtn_ico SG_turn"  action-type="reblog" action-data="{srcBlog:1, blogId:'6e794e5001012xlj'}"><cite><img class="SG_icon SG_icon111" src="http://simg.sinajs.cn/blog7style/images/common/sg_trans.gif" width="15" height="15" align="absmiddle">转载<em class="arrow">▼</em></cite></a></div>		</div>
		<div class="articalTag" id="sina_keyword_ad_area">
			<table>
				<tr>
					<td class="blog_tag">
					<script>
					var $tag='杂谈';
					var $tag_code='22940832f466812c7d2eb53dee729a21';
					var $r_quote_bligid='6e794e5001012xlj';
					var $worldcup='0';
					var $worldcupball='0';
					</script>
											<span class="SG_txtb">标签：</span>
																				<h3><a href="http://search.sina.com.cn/?c=blog&q=%D4%D3%CC%B8&by=tag" target="_blank">杂谈</a></h3>
																</td>
					<td class="blog_class">
											<span class="SG_txtb">分类：</span>
						<a target="_blank" href="http://blog.sina.com.cn/s/articlelist_1853443664_9_1.html">ops</a>
										</td>
				</tr>
			</table>
		</div>
						<!-- 正文开始 -->
		<div id="sina_keyword_ad_area2" class="articalContent  ">
			<p><strong>PV原语的含义</STRONG><br />
　　P操作和V操作是不可中断的程序段，称为原语。PV原语及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量sem是一整数，sem大于等于零时代表可供并发进程使用的资源实体数，但sem小于零时则表示正在等待使用临界区的进程数。<br />

　　P原语操作的动作是：<br />
　　（1）sem减1；<br />
　　（2）若sem减1后仍大于或等于零，则进程继续执行；<br />
　　（3）若sem减1后小于零，则该进程被阻塞后进入与该信号相对应的队列中，然后转进程调度。<br />
　　V原语操作的动作是：<br />
　　（1）sem加1；<br />
　　（2）若相加结果大于零，则进程继续执行；<br />
　　（3）若相加结果小于或等于零，则从该信号的等待队列中唤醒一等待进程，然后再返回原进程继续执行或转进程调度。<br />
　　PV操作对于每一个进程来说，都只能进行一次，而且必须成对使用。在PV原语执行期间不允许有中断的发生。<br />
<strong>用PV原语实现进程的互斥</STRONG><br />
　　由于用于互斥的信号量sem与所有的并发进程有关，所以称之为公有信号量。公有信号量的值反映了公有资源的数量。只要把临界区置于P(sem)和V(sem)之间，即可实现进程间的互斥。就象火车中的每节车厢只有一个卫生间，该车厢的所有旅客共享这个公有资源：卫生间，所以旅客间必须互斥进入卫生间，只要把卫生间放在P(sem)和V(sem)之间，就可以到达互斥的效果。以下例子说明进程的互斥实现。<br />

<strong>例1</STRONG><br />
　　生产围棋的工人不小心把相等数量的黑子和白子混装载一个箱子里，现要用自动分拣系统把黑子和白子分开，该系统由两个并发执行的进程组成，功能如下：<br />

　　（1）进程A专门拣黑子，进程B专门拣白子；<br />
　　（2）每个进程每次只拣一个子，当一个进程在拣子时不允许另一个进程去拣子；<br />
<strong>分析：</STRONG><br />
　　第一步：确定进程间的关系。由功能（2）可知进程之间是互斥的关系。<br />
　　第二步：确定信号量及其值。由于进程A和进程B要互斥进入箱子去拣棋子，箱子是两个进程的公有资源，所以设置一个信号量s，其值取决于公有资源的数目，由于箱子只有一个，s的初值就设为1。<br />

<strong>实现：</STRONG><br />
　　begin<br />
　　s:semaphore;<br />
　　s:=1;<br />
　　　cobegin<br />
　　　　process A<br />
　　　　begin<br />
　　　　L1: P(s);<br />
　　　　　拣黑子；<br />
　　　　　V(s);<br />
　　　　　goto L1;<br />
　　　　end;<br />
　　　　process B<br />
　　　　begin<br />
　　　　L2:P(s);<br />
　　　　　拣白子；<br />
　　　　　V(s);<br />
　　　　　goto L2;<br />
　　　　end;<br />
　　　coend;<br />
　　end;<br />
　　判断进程间是否互斥，关键是看进程间是否共享某一公有资源，一个公有资源与一个信号量相对应。确定信号量的值是一个关键点，它代表了可用资源实体数。如下实例：<br />

<strong>例2<br /></STRONG>　　某车站售票厅，任何时刻最多可容纳20名购票者进入，当售票厅中少于20名购票者时，厅外的购票者可立即进入，否则需要在外面等待。每个购票者可看成一个进程。<br />

　　分析：第一步：确定进程间的关系。售票厅是各进程共享的公有资源，当售票厅中多于20名购票者时，厅外的购票者需要在外面等待。所以进程间是互斥的关系。第二步：确定信号量及其值。只有一个公有资源：售票厅，所以设置一个信号量s。售票厅最多容纳20个进程，即可用资源实体数为20，s的初值就设为20。<br />

<strong>实现：<br /></STRONG>　　begin<br />
　　s:semaphore;<br />
　　s:=20;<br />
　　cobegin<br />
　　　process PI(I=1,2,……)<br />
　　　　begin P(s);<br />
　　　　　进入售票厅；<br />
　　　　　购票；<br />
　　　　　退出；<br />
　　　　　V(s);<br />
　　　　end;<br />
　　　coend<br />
&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>&nbsp;<wbr>
当购票者进入售票厅前要执行P(s)操作，执行后若s大于或等于零，说明售票厅的人数还未满可进入。执行后若s小于零，则说明售票厅的人数已满不能进入。这个实现中同时最多允许20个进程进入售票厅购票，其余进程只能等待。<br />

<strong>用PV原语实现进程的同步</STRONG><br />
　　与进程互斥不同，进程同步时的信号量只与制约进程及被制约进程有关而不是与整组并发进程有关，所以称该信号量为私有信号量。利用PV原语实现进程同步的方法是：首先判断进程间的关系为同步的，且为各并发进程设置私有信号量，然后为私有信号量赋初值，最后利用PV原语和私有信号量规定各进程的执行顺序。下面我们将例1增添一个条件，使其成为进程间是同步的。<br />

<strong>例3<br /></STRONG>　　在例1的基础之上再添加一个功能：<br />
　　（3）当一个进程拣了一个棋子（黑子或白子）以后，必让另一个进程拣一个棋子（黑子或白子）。<br />
<strong>分析：<br /></STRONG>　　第一步：确定进程间的关系。由功能（1）（2）（3）可知，进程间的关系为同步关系。第二步：确定信号量及其值。进程A和B共享箱子这个公有资源，但规定两个进程必须轮流去取不同色的棋子，因而相互间要互通消息。对于进程A可设置一个私有信号量s1，该私有信号量用于判断进程A是否能去拣黑子，初值为1。对于进程B同样设置一个私有信号量s2，该私有信号量用于判断进程B是否能去拣白子，初值为0。当然你也可以设置s1初值为0，s2初值为1。<br />

<strong>实现:</STRONG><br />
　　begin<br />
　　s1,s2:semaphore;<br />
　　s1:=1;s2:=0;<br />
　　cobegin<br />
　　　process A<br />
　　　begin<br />
　　　L1: P(s1);<br />
　　　　拣黑子；<br />
　　　　V(s2);<br />
　　　　goto L1;<br />
　　　end;&nbsp;<wbr>&nbsp;<wbr><br />
　　　process B<br />
　　　begin<br />
　　　L2:P(s2);<br />
　　　　拣白子；<br />
　　　　V(s1);<br />
　　　　goto L2;<br />
　　　end;<br />
　　coend;<br />
　　end;<br />
　　另外一个问题就是P原语是不是一定在V原语的前面？回答是否定的。下面看一个例子。<br />
<strong>例4</STRONG><br />
　　设在公共汽车上，司机和售票员的活动分别是：司机：启动车辆，正常行车，到站停车。售票员：上乘客，关车门，售票，开车门，下乘客。用PV操作对其控制。<br />

<strong>分析：</STRONG><br />
　　第一步：确定进程间的关系。司机到站停车后，售票员方可工作。同样，售票员关车门后，司机才能工作。所以司机与售票员之间是一种同步关系。<br />

　　第二步：确定信号量及其值。由于司机与售票员之间要互通消息，司机进程设置一个私有信号量run，用于判断司机能否进行工作，初值为0。售票员进程设置一个私有信号量stop，用于判断是否停车，售票员是否能够开车门，初值为0。<br />

　　实现：<br />
　　begin stop ,run:semaphore<br />
　　stop:=0;run:=0;<br />
　　cobegin<br />
　　　driver: begin<br />
　　　L1: P(run);<br />
　　　　启动车辆；<br />
　　　　正常行车；<br />
　　　　到站停车；<br />
　　　　 V(stop);<br />
　　　　goto&nbsp;<wbr> L1;<br />
　　　end;<br />
　　　conductor:begin<br />
　　　L2:上乘客；<br />
　　　　关车门；<br />
　　　　V(run);<br />
　　　　售票；<br />
　　　　P(stop);<br />
　　　　开车门；<br />
　　　　下乘客；<br />
　　　　goto L2;<br />
　　　end;<br />
　　　coend;<br />
　　end;<br />
　　用PV操作还可以实现进程同步与互斥的混合问题，典型的如：多个生产者和多个消费者共享容量为n的缓存区。这个例子在很多书中都有介绍，在这里就不说了。</P>
<hr />							
		</div>
						<!-- 正文结束 -->
			  <div class="blogzz_zzlist borderc" id="blog_quote" style="display:none">加载中，请稍候......</div>
		<div id="loginFollow"></div>
	</div>
	<!--博文正文 end -->
		<script type="text/javascript">
			var voteid="";
		</script>

            </div>       
            <div class="SG_connFoot"></div>
          </div>
</div>
	<!--第二列start-->
	
	<!--第三列start--><!--第三列end-->

	
    </div>
   <!--主题内容结束 -->
  

	<div id="diggerFla" style="position:absolute;left:0px;top:0px;width:0px"></div>
  </div>
</div>
<div id="swfbox"></div>
<script id="PVCOUNTER_FORIE" type="text/javascript"></script>
</body>
<script type="text/javascript">
var scope = {
	$setDomain : true,
	$uid : "1853443664",
	$PRODUCT_NAME : "blog7",		//blog7photo,blog7icp
	$pageid : "article",
	$key :  "952a7b4d4f88c8138399c49c87e3f417",
	$uhost : "",
	$ownerWTtype :"",
	$private: {"pageset":0,"tj":0,"adver":0,"sms":0,"ad":0,"blogsize":0,"cms":0,"hidecms":0,"top":0,"invitationset":0,"p4p":0,"spamcms":1,"init7":1,"quote":0,"foot":1,"isprivate":0,"headpic":1,"t_sina":"1853443664","msnfeed":"110","medal7":2,"oauth_token":1,"oauth_token_secret":1,"uname":"","p_push_t":"1","p_get_t":"1"},
	$is_photo_vip:0,
		 $nClass:0,
		 $articleid:"6e794e5001012xlj",
		 $sort_id:117,
		 $cate_id:"",
		 $isCommentAllow:0,
		 $album_pic:"",
		 $pn_x_rank:0,
		 $x_quote_c:"",
		 $flag2008:"",
		 	component_lists:{"2":{"size":730,"list":[920]},"1":{"size":210,"list":[901,910,903,911,904,47]}},
	formatInfo:1,
	UserPic:[{"pid":"6e794e504b381985e2013","repeat":"repeat-x","align-h":"center","align-v":"top","apply":"0"},{"pid":"","repeat":"repeat-x","align-h":"center","align-v":"top","apply":"0"},{"pid":"","repeat":"repeat-x","align-h":"center","align-v":"top","apply":"0"}],
	UserBabyPic:{"photoX":0,"photoY":0,"photoURL":null,"angle":0,"zoom":0,"maskX":0,"maskY":0,"maskURL":null,"frameURL":null},
	UserColor:1,
	backgroundcolor:"#dceccc",
	tpl:"5_13",
	reclist:0	};
var	$encrypt_code = "274200d4d9bf409903f6ab236a936e96";
</script>

<script type="text/javascript" src="http://sjs.sinajs.cn/blog7common/js/boot.js"></script>
<script type="text/javascript">__load_js();</script>
<script type="text/javascript">__render_page();</script>



<script type="text/javascript" charset="utf-8" src="http://static.bshare.cn/b/buttonLite.js#style=-1&amp;uuid=b436f96b-ce3c-469f-93ca-9c0c406fcf10&amp;pophcol=2&amp;lang=zh"></script><script type="text/javascript" charset="utf-8" src="http://static.bshare.cn/b/bshareC0.js"></script>
<script type="text/javascript" charset="utf-8">
        bShare.addEntry({pic: "", title:"分享自君诺  《信号量实例》", summary:"PV原语的含义 P操作和V操作是不可中断的程序段，称为原语。PV原语及信号量的概念都是由荷兰科学家E.W.Dijkstra提出的。信号量sem是一整...  (来自 @头条博客)"});
     </script>
    </html>

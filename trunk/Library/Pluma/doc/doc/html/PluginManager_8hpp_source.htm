<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Pluma - Plug-in Management Framework</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.png" title="Pluma home" alt="Pluma logo" />
        </div>
<!-- Generated by Doxygen 1.7.4 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.htm"><span>File&#160;List</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">PluginManager.hpp</div>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// Pluma - Plug-in Management Framework</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2010-2012 Gil Costa (gsaurus@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided &#39;as-is&#39;, without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef PLUMA_PLUGIN_MANAGER_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define PLUMA_PLUGIN_MANAGER_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;Pluma/Config.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;Pluma/Host.hpp&gt;</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;map&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="keyword">namespace </span>pluma{
<a name="l00038"></a>00038 <span class="keyword">class </span>DLibrary;
<a name="l00039"></a>00039 
<a name="l00044"></a><a class="code" href="classpluma_1_1PluginManager.htm">00044</a> <span class="keyword">class </span>PLUMA_API <a class="code" href="classpluma_1_1PluginManager.htm" title="Manages loaded plugins.">PluginManager</a>{
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="keyword">public</span>:
<a name="l00048"></a>00048 
<a name="l00053"></a>00053     ~<a class="code" href="classpluma_1_1PluginManager.htm" title="Manages loaded plugins.">PluginManager</a>();
<a name="l00054"></a>00054 
<a name="l00071"></a>00071     <span class="keywordtype">bool</span> load(<span class="keyword">const</span> std::string&amp; path);
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00091"></a>00091     <span class="keywordtype">bool</span> load(<span class="keyword">const</span> std::string&amp; folder, <span class="keyword">const</span> std::string&amp; pluginName);
<a name="l00092"></a>00092 
<a name="l00107"></a>00107     <span class="keywordtype">int</span> loadFromFolder(<span class="keyword">const</span> std::string&amp; folder, <span class="keywordtype">bool</span> recursive = <span class="keyword">false</span>);
<a name="l00108"></a>00108 
<a name="l00123"></a>00123     <span class="keywordtype">bool</span> unload(<span class="keyword">const</span> std::string&amp; pluginName);
<a name="l00124"></a>00124 
<a name="l00134"></a>00134     <span class="keywordtype">void</span> unloadAll();
<a name="l00135"></a>00135 
<a name="l00142"></a>00142     <span class="keywordtype">bool</span> addProvider(<a class="code" href="classpluma_1_1Provider.htm" title="Interface to provide applications with objects from plugins.">Provider</a>* provider);
<a name="l00143"></a>00143 
<a name="l00150"></a>00150     <span class="keywordtype">void</span> getLoadedPlugins(std::vector&lt;const std::string*&gt;&amp; pluginNames) <span class="keyword">const</span>;
<a name="l00151"></a>00151 
<a name="l00158"></a>00158     <span class="keywordtype">bool</span> isLoaded(<span class="keyword">const</span> std::string&amp; pluginName) <span class="keyword">const</span>;
<a name="l00159"></a>00159 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="keyword">protected</span>:
<a name="l00162"></a>00162 
<a name="l00169"></a>00169     <a class="code" href="classpluma_1_1PluginManager.htm" title="Manages loaded plugins.">PluginManager</a>();
<a name="l00170"></a>00170 
<a name="l00181"></a>00181     <span class="keywordtype">void</span> registerType(<span class="keyword">const</span> std::string&amp; type, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> version, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> lowestVersion);
<a name="l00182"></a>00182 
<a name="l00194"></a>00194     <span class="keyword">const</span> std::list&lt;Provider*&gt;* getProviders(<span class="keyword">const</span> std::string&amp; type) <span class="keyword">const</span>;
<a name="l00195"></a>00195 
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="keyword">private</span>:
<a name="l00198"></a>00198 
<a name="l00212"></a>00212     <span class="keyword">static</span> std::string getPluginName(<span class="keyword">const</span> std::string&amp; path);
<a name="l00213"></a>00213 
<a name="l00229"></a>00229     <span class="keyword">static</span> std::string resolvePathExtension(<span class="keyword">const</span> std::string&amp; path);
<a name="l00230"></a>00230 
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 <span class="keyword">private</span>:
<a name="l00233"></a>00233 
<a name="l00235"></a>00235     <span class="keyword">typedef</span> <span class="keywordtype">bool</span> fnRegisterPlugin(<a class="code" href="classpluma_1_1Host.htm" title="Manages providers.">Host</a>&amp;);
<a name="l00236"></a>00236     <span class="keyword">typedef</span> std::map&lt;std::string,DLibrary*&gt; LibMap;
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     LibMap libraries;   
<a name="l00239"></a>00239     <a class="code" href="classpluma_1_1Host.htm" title="Manages providers.">Host</a> host;          
<a name="l00240"></a>00240 
<a name="l00241"></a>00241 };
<a name="l00242"></a>00242 
<a name="l00243"></a>00243 }   <span class="comment">// namespace pluma</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245 <span class="preprocessor">#endif // PLUMA_PLUGIN_MANAGER_HPP</span>
</pre></div></div>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2011 Gil Costa, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.7.4</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>

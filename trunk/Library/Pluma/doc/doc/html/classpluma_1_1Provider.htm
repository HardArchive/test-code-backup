<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>Pluma - Plug-in Management Framework</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.png" title="Pluma home" alt="Pluma logo" />
        </div>
<!-- Generated by Doxygen 1.7.4 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.htm"><span>Class&#160;List</span></a></li>
      <li><a href="classes.htm"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><b>pluma</b>      </li>
      <li class="navelem"><a class="el" href="classpluma_1_1Provider.htm">Provider</a>      </li>
    </ul>
  </div>
</div>
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#friends">Friends</a>  </div>
  <div class="headertitle">
<div class="title">pluma::Provider Class Reference</div>  </div>
</div>
<div class="contents">
<!-- doxytag: class="pluma::Provider" -->
<p>Interface to provide applications with objects from plugins.  
 <a href="classpluma_1_1Provider.htm#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Provider_8hpp_source.htm">Provider.hpp</a>&gt;</code></p>

<p><a href="classpluma_1_1Provider-members.htm">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpluma_1_1Provider.htm#a60b3a62a5b8c7d7c8d2d0c8dda780369">~Provider</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a60b3a62a5b8c7d7c8d2d0c8dda780369"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual unsigned int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpluma_1_1Provider.htm#af8643b65e111e010edff6e7a489265e6">getVersion</a> () const =0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get provider version.  <a href="#af8643b65e111e010edff6e7a489265e6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classpluma_1_1Provider.htm#a192ea5a17a8fe9de1f3ba6572f44f266">isCompatible</a> (const <a class="el" href="classpluma_1_1Host.htm">Host</a> &amp;host) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Check compatibility with host.  <a href="#a192ea5a17a8fe9de1f3ba6572f44f266"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="friends"></a>
Friends</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="anchor" id="a912b690126957a1ad90d0c373a4ad4d0"></a><!-- doxytag: member="pluma::Provider::Host" ref="a912b690126957a1ad90d0c373a4ad4d0" args="" -->
class&#160;</td><td class="memItemRight" valign="bottom"><b>Host</b></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Interface to provide applications with objects from plugins. </p>
<p>The plugin specific implementations are unknown at the host side, only their shared interfaces are known. Then, host app needs a generic way of create interface objects. That's what provider classes are for. It is the factory design pattern (<a href="http://www.oodesign.com/factory-pattern.html">http://www.oodesign.com/factory-pattern.html</a>)</p>
<p>Shared interfaces define their provider types (by inheriting from <a class="el" href="classpluma_1_1Provider.htm" title="Interface to provide applications with objects from plugins.">pluma::Provider</a>). Hosts then use those tipes to get objects from the plugins. Plugins derive the shared interface providers so that they can provide host with specific implementations of the shared interface. Those specific providers are given to the host through a connect function.</p>
<p>Example: A host app uses objects of type Device. A certain plugin defines a Keyboard, witch is a Device. The <a class="el" href="classpluma_1_1Host.htm" title="Manages providers.">Host</a> will use DeviceProviders to create objects of type Device. The plugin will provide host specifically with a KeyboardProvider. Other plugins may provide host with other derived DeviceProvider types.</p>
<p>Device hpp (shared): </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &lt;Pluma/Pluma.hpp&gt;</span>
 <span class="keyword">class </span>Device{
 <span class="keyword">public</span>:
     <span class="keyword">virtual</span> std::string getDescription() <span class="keyword">const</span> = 0;
 };
 <span class="comment">// create DevicedProvider class</span>
 PLUMA_PROVIDER_HEADER(Device);
</pre></div><p>Device cpp (shared): </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &quot;Device.hpp&quot;</span>
 generate DevicedProvider with version 6, and compatible with at least v.3
 PLUMA_PROVIDER_SOURCE(Device, 6, 3);
</pre></div><p><br/>
 Keyboard code on the plugin side: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &lt;Pluma/Pluma.hpp&gt;</span>
<span class="preprocessor"> #include &quot;Device.hpp&quot;</span>

 <span class="keyword">class </span>Keyboard: <span class="keyword">public</span> Device{
 <span class="keyword">public</span>:
     std::string getDescription()<span class="keyword"> const</span>{
         <span class="keywordflow">return</span> <span class="stringliteral">&quot;keyboard&quot;</span>;
     }
 };

 <span class="comment">// create KeyboardProvider, it implements DeviceProvider</span>
 PLUMA_INHERIT_PROVIDER(Keyboard, Device);
</pre></div><p>plugin connector: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &lt;Pluma/Connector.hpp&gt;</span>
<span class="preprocessor"> #include &quot;Keyboard.hpp&quot;</span>

 PLUMA_CONNECTOR
 <span class="keywordtype">bool</span> connect(<a class="code" href="classpluma_1_1Host.htm" title="Manages providers.">pluma::Host</a>&amp; host){
     <span class="comment">// add a keyboard provider to host</span>
     host.<a class="code" href="classpluma_1_1Host.htm#ab673ba94ff56a12cdf2a7a25ebb8cc36" title="Add provider.">add</a>( <span class="keyword">new</span> KeyboardProvider() );
     <span class="keywordflow">return</span> <span class="keyword">true</span>;
 }
</pre></div><p><a class="el" href="classpluma_1_1Host.htm" title="Manages providers.">Host</a> application code: </p>
<div class="fragment"><pre class="fragment"><span class="preprocessor"> #include &lt;Pluma/Pluma.hpp&gt;</span>

<span class="preprocessor"> #include &quot;Device.hpp&quot;</span>
<span class="preprocessor"> #include &lt;iostream&gt;</span>
<span class="preprocessor"> #include &lt;vector&gt;</span>

 <span class="keywordtype">int</span> main(){

     <a class="code" href="classpluma_1_1Pluma.htm" title="Pluma plugins management.">pluma::Pluma</a> plugins;
     <span class="comment">// Tell plugins manager to accept providers of the type DeviceProvider</span>
     plugins.<a class="code" href="classpluma_1_1Pluma.htm#a73e15a18747b5efeb917b021c7a6f8e6" title="Tell Pluma to accept a certain type of providers.">acceptProviderType</a>&lt;DeviceProvider&gt;();
     <span class="comment">// Load library &quot;standard_devices&quot; from folder &quot;plugins&quot;</span>
     plugins.<a class="code" href="classpluma_1_1PluginManager.htm#aa00400d23efa8a8f94e44dd1c5bf54e6" title="Load a plugin given it&#39;s path.">load</a>(<span class="stringliteral">&quot;plugins&quot;</span>, <span class="stringliteral">&quot;standard_devices&quot;</span>);

     <span class="comment">// Get device providers into a vector</span>
     std::vector&lt;DeviceProvider*&gt; providers;
     plugins.<a class="code" href="classpluma_1_1Pluma.htm#a8e6f84a44a4d286ab25056072abb3d34" title="Get the stored providers of a certain type.">getProviders</a>(providers);

     <span class="comment">// create a Device from the first provider</span>
     <span class="keywordflow">if</span> (!providers.empty()){
         Device* myDevice = providers.first()-&gt;create();
         <span class="comment">// do something with myDevice</span>
         std::cout &lt;&lt; device-&gt;getDescription() &lt;&lt; std::endl;
         <span class="comment">// and delete it in the end</span>
         <span class="keyword">delete</span> myDevice;
     }
     <span class="keywordflow">return</span> 0;
 }
</pre></div> 
<p>Definition at line <a class="el" href="Provider_8hpp_source.htm#l00042">42</a> of file <a class="el" href="Provider_8hpp_source.htm">Provider.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a60b3a62a5b8c7d7c8d2d0c8dda780369"></a><!-- doxytag: member="pluma::Provider::~Provider" ref="a60b3a62a5b8c7d7c8d2d0c8dda780369" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual pluma::Provider::~Provider </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="af8643b65e111e010edff6e7a489265e6"></a><!-- doxytag: member="pluma::Provider::getVersion" ref="af8643b65e111e010edff6e7a489265e6" args="() const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual unsigned int pluma::Provider::getVersion </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get provider version. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>Version number. </dd></dl>

</div>
</div>
<a class="anchor" id="a192ea5a17a8fe9de1f3ba6572f44f266"></a><!-- doxytag: member="pluma::Provider::isCompatible" ref="a192ea5a17a8fe9de1f3ba6572f44f266" args="(const Host &amp;host) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool pluma::Provider::isCompatible </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classpluma_1_1Host.htm">Host</a> &amp;&#160;</td>
          <td class="paramname"><em>host</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Check compatibility with host. </p>
<p>The same provider may be compiled with different versions on host side and on plugins side. This function checks if a plugin provider is compatible with the current version of the same provider type on the host side.</p>
<dl><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">host</td><td><a class="el" href="classpluma_1_1Host.htm" title="Manages providers.">Host</a>, proxy of host application.</td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if it's compatible with <em>host</em>. </dd></dl>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Provider_8hpp_source.htm">Provider.hpp</a></li>
</ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2011 Gil Costa, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.7.4</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
